{"version":3,"sources":["Generator.jsx","App.jsx","serviceWorker.js","index.js"],"names":["alphabet","characterCount","Generator","_useState","useState","_useState2","Object","slicedToArray","nanoSlug","setNanoSlug","react_default","a","createElement","style","flex","display","justifyContent","alignItems","textAlign","dist","align","phoneColumns","tabletColumns","desktopColumns","react_typography_dist","react_button_dist_default","raised","onClick","generate","App","className","src_Generator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PASMA,SAAW,wCACXC,EAAiB,EA2BRC,MAzBf,WAAqB,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACFI,EADEJ,EAAA,GAOnB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,KAAM,EAAGC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUC,UAAW,WACjGR,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAMN,MAAO,CAAEC,KAAM,IACnBJ,EAAAC,EAAAC,cAACO,EAAA,IAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAMC,MAAM,SAASC,aAAc,EAAGC,cAAe,EAAGC,eAAgB,IACxEb,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAMC,MAAM,SAASC,aAAc,EAAGC,cAAe,EAAGC,eAAgB,GACtEb,EAAAC,EAAAC,cAACY,EAAA,UAAD,4BACAd,EAAAC,EAAAC,cAACY,EAAA,UAAD,2DACAd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CAAQe,QAAM,EAACC,QAAS,WAXhClB,EAAYmB,IAAS5B,EAAUC,MAWvB,YACCO,GAAYE,EAAAC,EAAAC,cAACY,EAAA,UAAD,KAAWd,EAAAC,EAAAC,cAAA,cAASJ,KAEnCE,EAAAC,EAAAC,cAACO,EAAA,KAAD,CAAMC,MAAM,SAASC,aAAc,EAAGC,cAAe,EAAGC,eAAgB,cClBnEM,MARf,WACE,OACEnB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAACmB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f1b4f37e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport generate from 'nanoid/generate';\nimport { Cell, Grid, Row } from '@material/react-layout-grid';\nimport '@material/react-layout-grid/dist/layout-grid.css';\nimport { Headline3, Subtitle1, Headline5 } from '@material/react-typography';\nimport '@material/react-typography/dist/typography.css';\nimport Button from '@material/react-button';\nimport '@material/react-button/dist/button.css';\n\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst characterCount = 4;\n\nfunction Generator() {\n  const [nanoSlug, setNanoSlug] = useState('');\n\n  function generateNanoSlug() {\n    setNanoSlug(generate(alphabet, characterCount));\n  }\n\n  return (\n    <div style={{ flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center', textAlign: 'center' }}>\n      <Grid style={{ flex: 1 }}>\n        <Row>\n          <Cell align=\"middle\" phoneColumns={0} tabletColumns={0} desktopColumns={2} />\n          <Cell align=\"middle\" phoneColumns={4} tabletColumns={8} desktopColumns={8}>\n            <Headline3>Nano-slug Generator</Headline3>\n            <Subtitle1>4-character slugs following a [0-9][A-Z] alphabet.</Subtitle1>\n            <Button raised onClick={() => generateNanoSlug()}>Generate</Button>\n            {nanoSlug && <Headline5><strong>{nanoSlug}</strong></Headline5>}\n          </Cell>\n          <Cell align=\"middle\" phoneColumns={0} tabletColumns={0} desktopColumns={2} />\n        </Row>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Generator;\n","import React from 'react';\nimport Generator from './Generator'\nimport './App.css';\n\nfunction App() {\n  return(\n    <div className=\"App\">\n      <Generator />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}